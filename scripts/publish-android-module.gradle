apply plugin: 'maven-publish'
apply plugin: 'signing'
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
    }
}
/*
task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**///R.html', '**/R.*.html', '**/index.html'
/*}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

 */


group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION


project.afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                //artifact androidJavadocsJar
                artifact androidSourcesJar


                pom {
                    signing {
                        sign publishing.publications.maven
                        sign configurations.archives
                    }
                    name = PUBLISH_ARTIFACT_ID
                    description = 'Building large scale Android Apps with homunculus'
                    url = 'https://github.com/worldiety/homunculus'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'Christopher Heyn'
                            email = 'Christopher.Heyn@worldiety.de'
                        }
                        developer {
                            name = 'Torben Schinke'
                            email = 'Torben.Schinke@worldiety.de'
                        }
                    }
                    scm {
                        connection = 'https://github.com/worldiety/homunculus.git'
                        developerConnection = 'scm:git:ssh://github.com/worldiety/homunculus.git'
                        url = 'https://github.com/worldiety/homunculus'
                    }
                }


            }
        }
        repositories {
            maven {
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = properties.getProperty('ossrhUsername')
                    password = properties.getProperty('ossrhPassword')
                }
            }
        }
    }
}



