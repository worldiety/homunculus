//apply plugin: 'maven-publish'
//apply plugin: 'signing'

apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

// Create variables with empty default values
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
//ext["sonatypeStagingProfileId"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["signing.keyId"] = ''
ext["signing.password"] = ''
//ext["signing.key"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
    //s01.oss.sonatype.org
    // Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    //ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    //ext["signing.key"] = System.getenv('SIGNING_KEY')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact sourcesJar


                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'Building large scale Android Apps with homunculus'
                    url = 'https://github.com/worldiety/homunculus'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'Christopher Heyn'
                            email = 'Christopher.Heyn@worldiety.de'
                        }
                    }
                    scm {
                        connection = 'https://github.com/worldiety/homunculus.git'
                        //developerConnection = ''
                        url = 'https://github.com/worldiety/homunculus'
                    }
                    withXml {
                        // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.compile.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }

    }
}

