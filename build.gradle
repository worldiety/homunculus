buildscript {
    repositories {
        google()
        mavenCentral()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath 'io.github.gradle-nexus:publish-plugin:1.1.0'

    }
}
plugins {
    id "java-library"
    id "maven-publish"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "signing"
}

allprojects {
    repositories {
        //jcenter()
        mavenCentral()
        google()
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    group = 'io.homunculus'
    version = '0.0.110'

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:deprecation"
        }
    }


}

// Create variables with empty default values
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
// ext["signing.key"] = System.getenv('SIGNING_KEY')

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
    // Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
}


subprojects {


}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "androidx") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "${targetSdk}.+"
            }
        }
    }

}

configure(allprojects) { project ->
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())


    if (!project.name.contains("android")) {
        apply plugin: "java"
        compileJava {
            options.encoding = 'UTF-8'
        }
        repositories {
            mavenCentral()
        }
        dependencies {
            implementation 'com.google.code.findbugs:jsr305:3.0.2'
            implementation 'org.slf4j:slf4j-api:1.7.30'
            implementation 'androidx.multidex:multidex:2.0.1'
        }

    }
    def artifactProjects = ['hcf-core', 'hcf-context', 'hcf-api-spring', 'hcf-codegen']
    if (artifactProjects.contains(project.name)) {

        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        tasks.withType(Tar) {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

        tasks.withType(Zip) {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }


        task sourcesJar(type: Jar) {
            duplicatesStrategy = 'include'
            archiveClassifier.set('sources')
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            archiveClassifier.set('javadoc')
            from javadoc.destinationDir
        }
        artifacts {
            archives sourcesJar, javadocJar
        }
        afterEvaluate {
            publishing {
                publications {
                    maven(MavenPublication) {
                        groupId group
                        artifactId project.name
                        version project.version

                        if (project.plugins.hasPlugin('war')) {
                            from components.web
                        } else {
                            from components.java
                        }
                        artifact sourcesJar
                        artifact javadocJar

                        pom {
                            signing {
                                sign publishing.publications.maven
                                sign configurations.archives
                            }
                            name = project.name
                            description = 'Building large scale Android Apps with homunculus'
                            url = 'https://github.com/worldiety/homunculus'

                            licenses {
                                license {
                                    name = 'The Apache License, Version 2.0'
                                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }
                            developers {
                                developer {
                                    name = 'Torben Schinke'
                                    email = 'Torben.Schinke@worldiety.de'
                                }
                            }
                            scm {
                                connection = 'https://github.com/worldiety/homunculus.git'
                                developerConnection = 'scm:git:ssh://github.com/worldiety/homunculus.git'
                                url = 'https://github.com/worldiety/homunculus'
                            }
                            pom.withXml {
                                configurations.implementation.allDependencies.each {
                                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                                    {
                                        def dependencyNode = dependenciesNode.appendNode('dependency')
                                        dependencyNode.appendNode('groupId', it.group)
                                        dependencyNode.appendNode('artifactId', it.name)
                                        dependencyNode.appendNode('version', it.version)
                                    }
                                }
                            }

                        }
                    }
                }

                repositories {
                    maven {
                        url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                        credentials {
                            username = properties.getProperty('ossrhUsername')
                            password = properties.getProperty('ossrhPassword')
                        }
                    }
                }
            }
        }


    }


}


//apply from: "${rootDir}/scripts/publish-root.gradle"










